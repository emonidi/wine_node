{
  "author": {
    "name": "Jaakko-Heikki Heusala",
    "email": "jheusala@iki.fi",
    "url": "http://www.jhh.me"
  },
  "name": "json-object",
  "description": "JSON extended to fully support JavaScript objects",
  "version": "0.0.3",
  "repository": {
    "type": "git",
    "url": "git://github.com/jheusala/node-json-object.git"
  },
  "main": "src/json-object.js",
  "engines": {
    "node": "~v0.4.10"
  },
  "dependencies": {},
  "devDependencies": {},
  "readme": "JSON with extended support for custom objects\n=============================================\n\nDescription\n-----------\n\nThis library extends standard JSON support in JavaScript to fully support \nobjects like Date. It does that by using a special format with strings but only \nwhen it is needed.\n\n\t           JSON                  |       JavaScript      |                             Description\n\t---------------------------------+-----------------------+---------------------------------------------------------------------------\n\t \"Hello\"                         | \"Hello\"               | If it doesn't end \")\" or doesn't have \"(\", it can be presented normally\n\t \"Date(s:1287197914000)\"         | Date(1287197914000)   | Date object\n\t \"String(Date(s:1287197914000))\" | \"Date(1287197914000)\" | String object\n\t \"UIMessage(OK)\"                 | UIMessage(...)        | Custom object\n\t---------------------------------+-----------------------+---------------------------------------------------------------------------\n\nInstallation for Node.js\n------------------------\n\nSimplest way to install is to use [npm](http://npmjs.org/), just simply `npm install json-object`.\n\nLicense\n-------\n\nMIT-style license, see [INSTALL.txt](http://github.com/jheusala/node-json-object/blob/master/LICENSE.txt).\n\nExample Code\n------------\n\nBefore using the library the `require('json-object').setup(global[, minimal])` \nhas to be called to setup global objects. If `minimal` is `true`, then only \nminimal changes are done. That means only `String.prototype.toJSON` is changed.\n\n\tvar json = require('json-object').setup(global);\n\nEncoding as JSON string is done by calling `json.stringify()` in usual way:\n\n\tvar data = {'date':new Date(),'msg':'Hello World!'};\n\tvar str = json.stringify(data);\n\tconsole.log(\"str = \" + sys.inspect(str));\n\nParsing is also done by calling `json.parse()` in standard way:\n\n\tvar parsed_data = json.parse(str);\n\tconsole.log(\"parsed_data = \" + sys.inspect(parsed_data));\n\t\nExtending to support your own objects\n-------------------------------------\n\nYou can also extend `json-object` to support your own objects:\n\n\t// Our custom object\n\tfunction UIMessage(msg, date) {\n\t\tthis.msg = \"\" + msg;\n\t\tthis.date = date || new Date();\n\t}\n\t\n\t// Extend our custom object to support json-object\n\tUIMessage.prototype.toJSON = (function() { return new json.JSONObject('UIMessage', [this.msg, this.date] ); });\n\tjson.revivers.UIMessage    = (function(value) { return new UIMessage(value[0], value[1]); });\n\n...and then use it easily:\n\n\t// Test for the object\n\tvar data = new UIMessage(\"Hello World!\");\n\tconsole.log(\"data = \" + sys.inspect(data));\n\t\n\tvar str = json.stringify(data);\n\tconsole.log(\"str = \" + sys.inspect(str));\n\t\n\tvar parsed_data = json.parse(str);\n\tconsole.log(\"parsed_data = \" + sys.inspect(parsed_data));\n",
  "readmeFilename": "README.md",
  "_id": "json-object@0.0.3",
  "dist": {
    "shasum": "7bd68db8de9a22a2d0a7893da6bb641e4b57cbad"
  },
  "_from": "json-object@>=0.0.2"
}
